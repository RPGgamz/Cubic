<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculating resolution and init. variables
ideal_height = 108;
ideal_width = 0;

aspect_ratio = display_get_width()/display_get_height();

ideal_width = round(ideal_height*aspect_ratio);
if (ideal_width &amp; 1) {
    ideal_width++;
}


//setting up view[0] for all rooms
for (var i = 1; i &lt;= room_last; i++) {
    if (room_exists(i)) {
        room_set_view(i, 1, true, 0, 0, ideal_width, ideal_height, 0, 0, ideal_width, ideal_height, 0, 0, 0, 0, -1);
        room_set_view_enabled(i, true);
    }
    
}
//resizing app.surface and window to calculated resolution
surface_resize(application_surface, ideal_width, ideal_height);
window_set_size(ideal_width, ideal_height);

//show_debug_message(string(display_get_width()));
//show_debug_message(string(display_get_height()));
//show_debug_message(string(ideal_width));
//show_debug_message(string(ideal_height));


//"zooming"
zoom = 1;
view_zoom = 1;

//scaling the window as big as possible (almost)
max_zoom = floor(display_get_width()/ideal_width);

zoom = max_zoom-1;
window_set_size(ideal_width*zoom, ideal_height*zoom);
display_set_gui_size(ideal_width, ideal_height);
//1 second delay before centering the window (necessary)
alarm[0] = 1;


room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enabling vsync (?)

//display_set_windows_alternate_sync(true);
display_reset(0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///centering the window, 1 step delay (necessary)
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///changing zoom/resolution
if (keyboard_check_pressed(ord("Z"))) {
    zoom++;
    
    if (zoom &gt; max_zoom) {
        zoom = 1;
    }
    
    window_set_size(ideal_width*zoom, ideal_height*zoom);
    alarm[0] = 1;
}

if (keyboard_check_pressed(ord("X"))) {
    zoom--;
    window_set_size(ideal_width*zoom, ideal_height*zoom);
    alarm[0] = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resizing the view/resolution by view_zoom
/*
if (room == rm_template_big or room == rm_0d or room == rm_3e) {
    view_zoom = 2;   
} else {                            //with this code we would have to put every room thats normal/big
    view_zoom = 1;                  //on a list here. Maybe change it -Victor
}
                                    //Idea: a for-loop in the create event that cycles through every room,
                                    //checks if its size is double, and then put the id and zoom_view
                                    //value into an array. -Victor
                                    
view_hview[1] = ideal_height*view_zoom;
view_wview[1] = ideal_width*view_zoom;

//if the view_zoom has changed, the app.surface has to increase/decrease resolution:
surface_resize(application_surface, ideal_width*view_zoom, ideal_height*view_zoom);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw green bar (forest)
if (instance_exists(obj_forest_transition)) {
    with (obj_forest_transition) {
        draw_set_color(merge_color(col_1, col_2, tick));
        
        switch (transition_dir) {
            case "left":
                draw_rectangle(x1-gb, 0, x1, height, false);
            break;
            case "right":
                draw_rectangle(x2-gb, 0, x2, height, false);
            break;
            case "up":
                draw_rectangle(x1, y1-gb, width+bb, y1, false)
            break;
            case "down":
                draw_rectangle(x2, y2-gb, width+bb, y2, false)
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw black bars
draw_set_color(c_black);
var xx =(ideal_width-120)/2
draw_rectangle(0, 0, xx-1, 108, false);
draw_rectangle(120+xx, 0, 120+2*xx, 108, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The Forest tr√¶kroner
surface_reset_target();
/*
if (room == rm_1a) {
    draw_background(bg_1a_GUI, 0, 0);
}
if (room == rm_1b) {
    draw_background(bg_1b_GUI, 0, 0);
}
//if (room == rm_1c) {
//    draw_background(bg_1c_GUI, 0, 0);
//}
if (room == rm_1d) {
    draw_background(bg_1d_GUI, 0, 0);
}
if (room == rm_1e) {
    draw_background(bg_1e_GUI, 0, 0);
}
if (room == rm_1f) {
    draw_background(bg_1f_GUI, 0, 0);
}
if (room == rm_1g) {
    draw_background(bg_1g_GUI, 0, 0);
}
if (room == rm_1h) {
    draw_background(bg_1h_GUI, 0, 0);
}
if (room == rm_1i) {
    draw_background(bg_1i_GUI, 0, 0);
}
if (room == rm_1j) {
    draw_background(bg_1i_GUI, 0, 0);
}
if (room == rm_1k) {
    draw_background(bg_1k_GUI, 0, 0);
}
if (room == rm_1l) {
    draw_background(bg_1l_GUI, 0, 0);
}
if (room == rm_1m) {
    draw_background(bg_1m_GUI, 0, 0);
}
if (room == rm_1n) {
    draw_background(bg_1n_GUI, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
