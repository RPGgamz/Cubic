<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate
//coordinates
x_start = view_xview[1];
y_start = view_yview[1];
x_end = x;
y_end = y;


//timing
transition_time = 30+round((distance_to_point(x_start, y_start)/8)^0.5-1); //a shot in the dark
step = 0;

//surface and view
surf_room = -1;

view_visible[1] = false;
view_visible[2] = true;
view_wview[2] = room_width;
view_hview[2] = room_height;

//working variables
progress = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up
obj_control.state = scr_idle;
surface_free(surf_room);

view_visible[2] = false;
view_visible[1] = true;
view_xview[1] = x;
view_yview[1] = y;

//stop animation
if (instance_exists(obj_pz_complete_animation)) instance_destroy(obj_pz_complete_animation);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate the position of the camera

//(event end_step instead of just step, because this object is created in the step event, and we want this to trigger the same frame, and not get skipped)

var timer = step/transition_time;
step++;

/* FORSKELLIGE TYPER OVERGANG
--------------konstant hastighed:
progress = timer;

--------------lineært aftagende hastighed:
progress = 2*timer - timer*timer;

--------------hastighed voksende og aftagende som et andengradspolinomium
progress = 3*timer*timer - 2*timer*timer*timer;

--------------blanding af ovenstående (k0=konstant, k1= lineær, k2 = andengrads)
var k0 = 50
var k1 = 25
var k2 = 25
progress = (timer*(k0+2*k1+timer*(-k1+3*k2-2*k2*timer)))/(k2+k1+k0);
*/

var k0 = 0
var k1 = 1
var k2 = 1
progress = (timer*(k0+2*k1+timer*(-k1+3*k2-2*k2*timer)))/(k2+k1+k0);

x = lerp(x_start, x_end, progress);
y = lerp(y_start, y_end, progress);

//update view1 coordinates, since they are refferenced for mini-map in obj_pz
view_xview[1] = x;
view_yview[1] = y;

//end
if (timer == 1) {
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create surf_room, and set it as view_surface
if !surface_exists(surf_room)
    {
    surf_room = surface_create(room_width, room_height);
    view_surface_id[2] = surf_room;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw surf_room to the GUI layer
if (surface_exists(surf_room))
    {
    draw_enable_alphablend(false);
    draw_set_colour_write_enable(true,true,true,false);
    draw_surface(surf_room, -x, -y);
    draw_enable_alphablend(true);
    draw_set_colour_write_enable(true,true,true,true);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
