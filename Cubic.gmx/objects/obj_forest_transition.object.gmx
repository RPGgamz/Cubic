<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables and surfaces
//input variables
transition_dir = "left";
next_room = room_next(room);
step = 0;
bb = obj_control.bb;
gb_thickness = 60; //green bar, drawn in display_manager. this is how thick the green bar should be, compared to the screen, in percent.

//working variables
width = display_get_gui_width()-bb*2;
height = display_get_gui_height();
gb = -1;
tran_alpha = 0;


//surfaces
surf_start = surface_create(surface_get_width(application_surface)-2*bb, surface_get_height(application_surface));
surf_end = surface_create(surface_get_width(application_surface)-2*bb, surface_get_height(application_surface));


//draw surf_start
surface_set_target(surf_start);
draw_enable_alphablend(false);
draw_set_colour_write_enable(true,true,true,false);
draw_clear(c_black);
draw_surface(application_surface, -bb, 0);
draw_enable_alphablend(true);
draw_set_colour_write_enable(true,true,true,true);
surface_reset_target();



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///forest transition colors

//deep forest
c_deep_forest = make_color_rgb(62, 91, 46);

//medium forest
c_medium_forest = make_color_rgb(66, 96, 48);

//light forest
c_light_forest = make_color_rgb(69, 101, 51);

//star forest
c_star_forest = make_color_rgb(13, 14, 12);

/*
//COLORS!!!!!
if (room == rm_green_forest_1c or room == rm_green_forest_2c) {
    col_1 = c_medium_forest;
} else if (room == rm_green_forest_3c or room == rm_green_forest_4c or room == rm_green_forest_4ca or room == rm_green_forest_5c or room == rm_green_forest_6c) {
    col_1 = c_deep_forest;
} else {
    col_1 = c_light_forest;
}
show_debug_message("col_1: " + string(col_1))
if (next_room == rm_green_forest_1c or next_room == rm_green_forest_2c) {
    col_2 = c_medium_forest;
} else if (next_room == rm_green_forest_3c or next_room == rm_green_forest_4c or next_room == rm_green_forest_4ca or next_room == rm_green_forest_5c or next_room == rm_green_forest_6c) {
    col_2 = c_deep_forest;
} else if (next_room != rm_green_forest_1c or next_room != rm_green_forest_2c or next_room != rm_green_forest_4c or next_room != rm_green_forest_4ca or next_room != rm_green_forest_5c or next_room != rm_green_forest_6c) {
    col_2 = c_light_forest;
}
show_debug_message("col_2: " + string(col_2))
show_debug_message("next room: " + string(next_room));
*/

tick = 0;
tick_rate = 0;
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bush enter sound
audio_sound_pitch(snd_bush_long, 1 + random_range(-.05, .05));
audio_sound_gain(snd_bush_long, 30/100, 0);
audio_sound_gain(snd_bush_long, 0, 1680);
audio_play_sound(snd_bush_long, 10, false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy the surfaces
surface_free(surf_start);
surface_free(surf_end);

with (obj_control) scr_move_only(other.new_cube);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bush sound
/*
audio_sound_gain(snd_bush_short, 13/100, 0);
audio_sound_pitch(snd_bush_short, 1 - .1); //+ random_range(-.1, .1));
audio_sound_gain(snd_bush_short, 0, 1210);
audio_play_sound(snd_bush_short, 10, false);

audio_sound_pitch(snd_bush_long, .98);
audio_sound_gain(snd_bush_long, 23/100, 0);
audio_sound_gain(snd_bush_long, 0, 860);
audio_play_sound(snd_bush_long, 10, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (tick = 0) {
//COLORS!!!!!
    if (room == rm_green_forest_1c or room == rm_green_forest_2c) {
        col_1 = c_medium_forest;
    } else if (room == rm_green_forest_3c or room == rm_green_forest_4c or room == rm_green_forest_4ca or room == rm_green_forest_5c or room == rm_green_forest_6c) {
        col_1 = c_deep_forest;
    } else {
        col_1 = c_light_forest;
    }
    if (next_room == rm_green_forest_1c or next_room == rm_green_forest_2c) {
        col_2 = c_medium_forest;
    } else if (next_room == rm_green_forest_3c or next_room == rm_green_forest_4c or next_room == rm_green_forest_4ca or next_room == rm_green_forest_5c or next_room == rm_green_forest_6c) {
        col_2 = c_deep_forest;
    } else if (next_room != rm_green_forest_1c or next_room != rm_green_forest_2c or next_room != rm_green_forest_4c or next_room != rm_green_forest_4ca or next_room != rm_green_forest_5c or next_room != rm_green_forest_6c) {
        col_2 = c_light_forest;
    }
    show_debug_message("next room: " + string(next_room));
}
*/
if (tick &lt; 1) {
    tick_rate += 0.029;
    tick += power(tick_rate, 3);
    if (tick &gt;= 1) {
        tick = 1;
    } else {
        alarm[0]++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate gb (actual thickness) and transition_time
if (gb == -1) {
    switch (transition_dir) {
        case "left":
        case "right":
            gb = gb_thickness*width/100;
        break;
        case "up":
        case "down":
            gb = gb_thickness*height/100;
        break;
    }
    
    transition_time = gb/obj_control.movespeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cam movement(calculate surface positions)

timer = step/transition_time;

/* FORSKELLIGE TYPER OVERGANG
--------------konstant hastighed:
progress = timer;

--------------lineært aftagende hastighed:
progress = 2*timer - timer*timer;

--------------hastighed voksende og aftagende som et andengradspolinomium
progress = 3*timer*timer - 2*timer*timer*timer;

--------------blanding af ovenstående (k0=konstant, k1= lineær, k2 = andengrads)
var k0 = 50
var k1 = 25
var k2 = 25
progress = (timer*(k0+2*k1+timer*(-k1+3*k2-2*k2*timer)))/(k2+k1+k0);
*/
var k0 = 0
var k1 = 0
var k2 = 1
progress = (timer*(k0+2*k1+timer*(-k1+3*k2-2*k2*timer)))/(k2+k1+k0);

var last_rem; // how big a portion of the last room is remaining on screen
switch (transition_dir) {
    case "left": //push right to "move the camera" left
        x2 = (progress -1)*(width+gb); y2 = 0;
        x1 = (progress)*(width+gb); y1 = 0;
        last_rem = 1 - (width - (progress)*(width+gb))/width;
    break;
    case "right"://push left to "move the camera" right
        x2 = (1 -progress)*(width+gb); y2 = 0;
        x1 = (0 -progress)*(width+gb); y1 = 0;
        last_rem = 1 - (width - (progress)*(width+gb))/width;
    break;
    case "up": //push down to "move the camera" up
        x2 = 0; y2 = (progress -1)*(height+gb);
        x1 = 0; y1 = (progress)*(height+gb);
        last_rem = 1 - (height - (progress)*(height+gb))/height;
    break;
    case "down": //push up to "move the camera" down
        x2 = 0; y2 = (1 -progress)*(height+gb);
        x1 = 0; y1 = (0 -progress)*(height+gb);
        last_rem = 1 - (height - (progress)*(height+gb))/height;
    break;
}
x1 += bb; x2 += bb;

//turn surface_start green
tran_alpha = clamp(last_rem*3/2, 0, 1);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bird &amp; bush-exit sounds
if (progress &gt; .65 &amp;&amp; progress &lt; .69) {
    var birds_flying = false;
    
    if (irandom_range(0, 8) &gt;= 7) {
        //many or few
        var vol = irandom_range(-9, 0)/100;
    
        //crow/owl
        if (irandom_range(0, 3) &gt;= 3) {
            audio_sound_pitch(snd_crow_1, 1 + random_range(-.1, .15));
            audio_sound_gain(snd_crow_1, 58/100 + (vol/1.5), 0);
            audio_sound_gain(snd_crow_1, 0, 1680);
            audio_play_sound(snd_crow_1, 10, false);
            birds_flying = true;
        } else if (irandom_range(0, 3) &gt;= 3) {
            audio_sound_pitch(snd_owls_short_1, 1 + random_range(-.1, .1));
            audio_sound_gain(snd_owls_short_1, 50/100 + (vol/1.5), 0);
            audio_sound_gain(snd_owls_short_1, 0, 2000);
            audio_play_sound(snd_owls_short_1, 10, false);
            birds_flying = true;
        }
        if (birds_flying) {
            //birds flying away
            audio_sound_gain(snd_wing_flaps_1, 26/100 + vol, 0);
            audio_sound_gain(snd_wing_flaps_1, 0, 2100);
            audio_play_sound(snd_wing_flaps_1, 10, false);
            
            audio_sound_gain(snd_wing_flaps_2, 26/100 + vol, 0);
            audio_sound_gain(snd_wing_flaps_2, 0, 2100);
            audio_play_sound(snd_wing_flaps_2, 10, false);
        
            if (irandom_range(0, 1)) {
                audio_sound_gain(snd_great_wing_flap_1, 32/100 + vol/100, 0);
                audio_sound_gain(snd_great_wing_flap_1, 0, 2100);
                audio_play_sound(snd_great_wing_flap_1, 10, false);
            } else {
                audio_sound_gain(snd_great_wing_flap_2, 32/100+vol, 0);
                audio_sound_gain(snd_great_wing_flap_2, 0, 2100);
                audio_play_sound(snd_great_wing_flap_2, 10, false);
            }
        }
    }
}
//bush exit
if (progress &gt; .96 &amp;&amp; progress &lt; .98) {
    audio_sound_pitch(snd_bush_short, 1 - .1 + random_range(-.05, .05));
    audio_sound_gain(snd_bush_short, 10/100, 0);
    audio_sound_gain(snd_bush_short, 0, 1210);
    audio_play_sound(snd_bush_short, 10, false);
    
    audio_sound_pitch(snd_bush_long, .98 + random_range(-.05, .05));
    audio_sound_gain(snd_bush_long, 23/100, 0);
    audio_sound_gain(snd_bush_long, 0, 860);
    audio_play_sound(snd_bush_long, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment step and maybe end
step++;

if (step &gt; transition_time) instance_destroy();

if (!surface_exists(surf_start) || !surface_exists(surf_end)) {
   if (room != next_room) {
      room_goto(next_room);
   }
   instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update surf_end

surface_set_target(surf_end);
draw_enable_alphablend(false);
draw_set_colour_write_enable(true,true,true,false);
draw_clear(c_black);
draw_surface(application_surface, -bb, 0);
draw_enable_alphablend(true);
draw_set_colour_write_enable(true,true,true,true);
surface_reset_target();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the surfaces
if (room != next_room) room_goto(next_room);

draw_enable_alphablend(false);
draw_set_colour_write_enable(true,true,true,false)
draw_surface_stretched(surf_start, x1, y1, width, height);
draw_surface_stretched(surf_end, x2, y2, width, height);
draw_enable_alphablend(true);
draw_set_colour_write_enable(true,true,true,true)


//making "the old surface" green
draw_set_alpha(tran_alpha);

draw_set_color(merge_color(col_1, col_2, tick));

draw_rectangle(x1, y1, x1+width, y1+height, false);

draw_set_alpha(1);
draw_set_color(c_white);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
