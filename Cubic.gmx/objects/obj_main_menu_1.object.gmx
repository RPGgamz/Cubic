<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables

//cube
zoom_x = 1;
zoom_y = 1;
zoom_speed = 0;
rotation = 0;
rotation_speed = 0;
hd = 0;

//text
last_pulse = 0;
alpha_pulse = 0;
pulse_speed = .01;
alpha_min = 0.3;
alpha_max = 0.95;
time_max = 60;
time_min = 16;
alarm[0] = 72;

//flash
flash_done = false;
last_flash = 0;
alpha_flash = 0;
flash_speed = .125;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flash + spinning and zooming

alarm[1]++;

//spinning and zooming
if (flash_done) {
    rotation_speed += .021;
    rotation += rotation_speed;
    
    zoom_speed += .00022;
    zoom_x += zoom_speed;
    zoom_y += zoom_speed;
    
    if (hd &lt; 6) {
        hd += .1;
    
        if (hd &gt;= 6) {
            hd = 6;
        }
    }
} else {
    //flash
    alarm[0] = -1;
    if (alpha_pulse &gt; 0) {
        alpha_pulse -= pulse_speed*10;
        if (alpha_pulse &lt;= 0) {
            alpha_pulse = 0;
        }
    }
    if (last_flash &lt;= alpha_flash) {
        last_flash = alpha_flash;
        alpha_flash += flash_speed;
        
        if (alpha_flash &gt;= 1) {
            alpha_flash = 1;
            last_flash = 2;
            
            //how long alpha = 1 lasts
            alarm[1] = 6;
        }
    } else {
        last_flash = alpha_flash;
        flash_speed -= 0.005;
        alpha_flash -= flash_speed;
        
        if (alpha_flash &lt;= 0) {
            alpha_flash = 0;
            last_flash = -1;
            
            flash_done = true;
            //how long before spinning and zoom
            alarm[1] = 3;
        }
    }
//CHANGING THESE MAGIC NUMBERS MAY CAUSE PROBLEMS:
//flash_speed, the decrease of flash_speed, pulse_speed*10   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///making "press any..."-text pulse

alarm[0]++;

if (last_pulse &lt;= alpha_pulse) {
    last_pulse = alpha_pulse;
    alpha_pulse += pulse_speed;
        
    if (alpha_pulse &gt;= alpha_max) {
        alpha_pulse = alpha_max;
        last_pulse = 2;
        
        alarm[0] = time_max;
    }
} else {
    last_pulse = alpha_pulse;
    alpha_pulse -= pulse_speed/2;

    if (alpha_pulse &lt;= alpha_min) {
        alpha_pulse = alpha_min;
        last_pulse = -1;
        
        alarm[0] = time_min;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[1] == -1) {
    if (keyboard_check_pressed(vk_anykey)) {
        alarm[1] = 1;
    }
} else {

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing the cube, text, etc.

//cube
draw_sprite_ext(spr_test, 0, room_width/2, room_height/2-6+hd, zoom_x, zoom_y, rotation, c_white, 1);

//text
if (alpha_pulse &gt; 0) {
    draw_set_alpha(alpha_pulse);
    draw_sprite(spr_press_to_start, 0, 0, 0);
}

//flash
if (alpha_flash &gt; 0) {
    draw_set_alpha(alpha_flash);
    draw_set_color(c_white);
    draw_rectangle(0, 0, room_width, room_height, false);
}

//resetting
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
