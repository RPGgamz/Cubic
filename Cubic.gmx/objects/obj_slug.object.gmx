<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//direction
image_xscale = choose(-1, 1);

//turning
turnchance = 10;

//timing
image_speed = 0;
period = 15;
alarm[0] = irandom_range(1, period);
image_index = floor(random(image_number-0.1))

//duck down
if (!position_meeting(x, y-1, obj_bug_zone_in)) y++;

//forced turn
if (
        !(
    position_meeting(x+2.5*image_xscale, y, obj_bug_zone_in)
    &amp;&amp;
    position_meeting(x+2.5*image_xscale, y-1, obj_bug_zone_in)
        ) 
    ||
    position_meeting(x+2.5*image_xscale, y, obj_cube)
    ||
    position_meeting(x+2.5*image_xscale, y-1, obj_cube)
){
    image_xscale = -1*image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index++;
if (image_index &gt;= image_number) image_index = 0;
alarm[0] = period;

switch(image_index) {
    case 2:
    case 3:
        x += image_xscale;
        break;
    case 0:
        //forced and random turn
        if (
                !(
            position_meeting(x+2.5*image_xscale, y, obj_bug_zone_in)
            &amp;&amp;
            position_meeting(x+2.5*image_xscale, y-1, obj_bug_zone_in)
                ) 
            ||
            position_meeting(x+2.5*image_xscale, y, obj_cube)
            ||
            position_meeting(x+2.5*image_xscale, y-1, obj_cube)
            ||
                (
            random(100) &lt; turnchance 
            &amp;&amp;
            position_meeting(x-4*image_xscale, y, obj_bug_zone_out)
            &amp;&amp;
            position_meeting(x-4*image_xscale, y-1, obj_bug_zone_out)
            &amp;&amp;
            !position_meeting(x-4*image_xscale, y, obj_cube)
            &amp;&amp;
            !position_meeting(x-4*image_xscale, y-1, obj_cube)
                )
            
        ){
            
            image_xscale = -1*image_xscale;
        }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
